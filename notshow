chrome.runtime.onMessage.addListener(function(message, sender){
  console.log(message, sender)
  if(message.action =='popact'){

    switch(message.event){
        case 'both':
        console.log('here')
       
            break;
        case 'audioonly':
            console.log('only audio was selected')
            break;
        case 'cameraonly':
            console.log('only camera was selected')
            break;
        case 'none':
            console.log('none, obviously')
            break;
        default:
            break;
  }
    }
    if (message.action=='cont'){
      chrome.tabs.query({}, function (tabs) {
        tabs.forEach(tab=>{
          if(tab.active==true){
            chrome.desktopCapture.chooseDesktopMedia(['screen','window'], tab, function (streamId) {
              if (streamId) {
                const constraints = {
                  audio: false,
                  video: {
                    mandatory: {
                      chromeMediaSource: 'desktop',
                      chromeMediaSourceId: streamId
                    }
                  }
                };
                navigator.mediaDevices.getUserMedia(constraints)
      .then(function (stream) {
        const mediaRecorder = new MediaRecorder(stream);

mediaRecorder.ondataavailable = function (event) {
  console.log(event.data)
};
mediaRecorder.start();

setTimeout(()=>{
  mediaRecorder.stop();
stream.getTracks().forEach(function (track) {
  track.stop();
});
},2000)
      })
      .catch(function (error) {
        console.error('Error accessing media stream:', error);
      });
              } else {
                console.log('error o')
              }
            });
          }
        })
      
      });
    }
})


/*let recorder;
let data = [];

async function startRecording(streamId) {
  if (recorder?.state === 'recording') {
    throw new Error('Called startRecording while recording is in progress.');
  }

  const media = await navigator.mediaDevices.getUserMedia({
    audio: {
      mandatory: {
        chromeMediaSource: 'tab',
        chromeMediaSourceId: streamId
      }
    },
    video: {
      mandatory: {
        chromeMediaSource: 'tab',
        chromeMediaSourceId: streamId
      }
    }
  });

  const output = new AudioContext();
  const source = output.createMediaStreamSource(media);
  source.connect(output.destination);

  recorder = new MediaRecorder(media, { mimeType: 'video/webm' });
  recorder.ondataavailable = (event) => data.push(event.data);
  recorder.onstop = () => {
    const blob = new Blob(data, { type: 'video/webm' });
    window.open(URL.createObjectURL(blob), '_blank');

    recorder = undefined;
    data = [];
  };
  recorder.start();

  window.location.hash = 'recording';
}

async function stopRecording() {
  recorder.stop();

  recorder.stream.getTracks().forEach((t) => t.stop());

  window.location.hash = '';

}*/

